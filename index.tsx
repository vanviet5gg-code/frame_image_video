import React, { useState, useCallback, useRef } from 'react';
import { createRoot } from 'react-dom/client';
import { GoogleGenAI, Type } from "@google/genai";

const App = () => {
    const [videoFile, setVideoFile] = useState<File | null>(null);
    const [videoSrc, setVideoSrc] = useState<string>('');
    const [prompt, setPrompt] = useState<string>('');
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [statusMessage, setStatusMessage] = useState<string>('');
    const [resultImages, setResultImages] = useState<{src: string, reason: string}[]>([]);
    const [error, setError] = useState<string>('');

    const allFramesRef = useRef<string[]>([]);

    const handleVideoChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
            setVideoFile(file);
            const url = URL.createObjectURL(file);
            setVideoSrc(url);
            setResultImages([]);
            setError('');
        }
    };

    const extractFrames = useCallback(async (file: File): Promise<string[]> => {
        return new Promise((resolve, reject) => {
            const video = document.createElement('video');
            video.src = URL.createObjectURL(file);
            video.muted = true;

            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            const frames: string[] = [];

            video.onloadedmetadata = () => {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                video.currentTime = 0;
            };

            video.onseeked = async () => {
                if (!context) {
                    reject(new Error("Kh√¥ng th·ªÉ l·∫•y context c·ªßa canvas."));
                    return;
                }
                context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
                // Gi·∫£m ch·∫•t l∆∞·ª£ng ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô v√† gi·∫£m k√≠ch th∆∞·ªõc d·ªØ li·ªáu
                const dataUrl = canvas.toDataURL('image/jpeg', 0.8); 
                frames.push(dataUrl.split(',')[1]); // Ch·ªâ l·∫•y d·ªØ li·ªáu base64

                const nextTime = video.currentTime + 1; // L·∫•y 1 khung h√¨nh m·ªói gi√¢y
                setStatusMessage(`ƒêang tr√≠ch xu·∫•t khung h√¨nh... (${frames.length} / ${Math.floor(video.duration)})`);
                
                if (nextTime <= video.duration) {
                    video.currentTime = nextTime;
                } else {
                    resolve(frames);
                }
            };

            video.onerror = (e) => {
                reject(new Error("L·ªói khi t·∫£i video."));
            };
            
            video.load();
        });
    }, []);


    const handleProcessVideo = async () => {
        if (!videoFile || !prompt) {
            setError("Vui l√≤ng ch·ªçn m·ªôt video v√† nh·∫≠p y√™u c·∫ßu.");
            return;
        }

        setIsLoading(true);
        setError('');
        setResultImages([]);
        allFramesRef.current = [];

        try {
            const frames = await extractFrames(videoFile);
            allFramesRef.current = frames;
            
            if (frames.length === 0) {
                throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t khung h√¨nh n√†o t·ª´ video.");
            }

            setStatusMessage("ƒêang ph√¢n t√≠ch video v·ªõi AI, vui l√≤ng ƒë·ª£i...");

            const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });
            
            const model = 'gemini-2.5-pro';

            const systemInstruction = `B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch video. Nhi·ªám v·ª• c·ªßa b·∫°n l√† xem x√©t m·ªôt chu·ªói c√°c khung h√¨nh video v√† x√°c ƒë·ªãnh nh·ªØng khung h√¨nh ph√π h·ª£p nh·∫•t v·ªõi y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.
            Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng l√†: "${prompt}".
            Ch·ªâ tr·∫£ v·ªÅ c√°c khung h√¨nh ch√≠nh x√°c nh·∫•t.
            Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON c√≥ c·∫•u tr√∫c l√† m·ªôt m·∫£ng t√™n l√† 'scenes'. M·ªói ƒë·ªëi t∆∞·ª£ng trong m·∫£ng ph·∫£i c√≥ hai thu·ªôc t√≠nh: 'frameIndex' (ch·ªâ s·ªë c·ªßa khung h√¨nh kh·ªõp trong chu·ªói ƒë·∫ßu v√†o) v√† 'reason' (m·ªôt m√¥ t·∫£ ng·∫Øn g·ªçn t·∫°i sao khung h√¨nh n√†y ƒë∆∞·ª£c ch·ªçn).`;

            const contents = [
                { text: systemInstruction },
                ...frames.map(data => ({ inlineData: { mimeType: 'image/jpeg', data } })),
            ];

            const response = await ai.models.generateContent({
                model,
                contents: { parts: contents },
                config: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: Type.OBJECT,
                        properties: {
                            scenes: {
                                type: Type.ARRAY,
                                items: {
                                    type: Type.OBJECT,
                                    properties: {
                                        frameIndex: { type: Type.INTEGER },
                                        reason: { type: Type.STRING },
                                    },
                                    required: ["frameIndex", "reason"]
                                }
                            }
                        }
                    }
                }
            });
            
            const jsonResponse = JSON.parse(response.text);

            if (!jsonResponse.scenes || jsonResponse.scenes.length === 0) {
                setError("AI kh√¥ng t√¨m th·∫•y c·∫£nh n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.");
            } else {
                const finalImages = jsonResponse.scenes
                    .map((scene: { frameIndex: number, reason: string }) => {
                        if (scene.frameIndex < allFramesRef.current.length) {
                            return {
                                src: `data:image/jpeg;base64,${allFramesRef.current[scene.frameIndex]}`,
                                reason: scene.reason
                            };
                        }
                        return null;
                    })
                    .filter(Boolean); // L·ªçc b·ªè c√°c gi√° tr·ªã null
                
                setResultImages(finalImages);
            }

        } catch (e: any) {
            console.error(e);
            setError(`ƒê√£ x·∫£y ra l·ªói: ${e.message}`);
        } finally {
            setIsLoading(false);
            setStatusMessage('');
        }
    };

    const handleDownload = (src: string, index: number) => {
        const link = document.createElement('a');
        link.href = src;
        link.download = `phancanh_${index + 1}.jpg`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    const handlePreview = (src: string) => {
        const newWindow = window.open();
        newWindow?.document.write(`<body style="margin:0; background:#222;"><img src="${src}" style="width:100%; height:auto; display:block; margin:auto;"></body>`);
    };

    return (
        <>
            <h1>üé¨ Ph√¢n c·∫£nh Video</h1>
            <main className="main-container">
                <section className="panel control-panel" aria-labelledby="control-panel-heading">
                    <h2 id="control-panel-heading">B·∫£ng ƒëi·ªÅu khi·ªÉn</h2>
                    <div className="control-group">
                        <label htmlFor="video-upload">1. T·∫£i l√™n Video c·ªßa b·∫°n</label>
                        <input id="video-upload" type="file" accept="video/*" onChange={handleVideoChange} />
                    </div>
                    
                    {videoSrc && (
                        <video id="video-preview" src={videoSrc} controls>
                            Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ th·∫ª video.
                        </video>
                    )}

                    <div className="control-group">
                        <label htmlFor="prompt-input">2. M√¥ t·∫£ c·∫£nh c·∫ßn c·∫Øt</label>
                        <textarea
                            id="prompt-input"
                            value={prompt}
                            onChange={(e) => setPrompt(e.target.value)}
                            placeholder="V√≠ d·ª•: t√¨m t·∫•t c·∫£ c√°c c·∫£nh c√≥ m·ªôt chi·∫øc √¥ t√¥ m√†u ƒë·ªè ƒëang ch·∫°y tr√™n ƒë∆∞·ªùng"
                        />
                    </div>
                    
                    <button className="action-button" onClick={handleProcessVideo} disabled={isLoading || !videoFile || !prompt}>
                        {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'B·∫Øt ƒë·∫ßu c·∫Øt c·∫£nh'}
                    </button>
                    {error && <div className="error-message">{error}</div>}
                </section>
                
                <section className="panel result-panel" aria-labelledby="result-panel-heading">
                    <h2 id="result-panel-heading">K·∫øt qu·∫£</h2>
                    {isLoading ? (
                        <div className="status-container">
                            <div className="spinner"></div>
                            <p>{statusMessage}</p>
                        </div>
                    ) : resultImages.length > 0 ? (
                        <div className="result-grid">
                            {resultImages.map((image, index) => (
                                <div key={index} className="result-item" title={image.reason}>
                                    <img src={image.src} alt={`K·∫øt qu·∫£ ph√¢n c·∫£nh ${index + 1}`} />
                                    <div className="result-item-overlay">
                                        <button className="overlay-button" onClick={() => handlePreview(image.src)}>Xem tr∆∞·ªõc</button>
                                        <button className="overlay-button" onClick={() => handleDownload(image.src, index)}>T·∫£i xu·ªëng</button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div className="placeholder">
                            <p>K·∫øt qu·∫£ h√¨nh ·∫£nh ƒë√£ c·∫Øt s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y.</p>
                        </div>
                    )}
                </section>
            </main>
        </>
    );
};

const container = document.getElementById('root');
const root = createRoot(container!);
root.render(<App />);
